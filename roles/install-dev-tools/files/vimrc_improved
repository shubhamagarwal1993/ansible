set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" custom plugins
Plugin 'kien/ctrlp.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline'
Plugin 'scrooloose/syntastic'
Plugin 'godlygeek/tabular'
Plugin 'wikitopian/hardmode'
Plugin 'lambdatoast/elm.vim'
Plugin 'adoy/vim-php-refactoring-toolbox'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
set laststatus=2

" hide buffers rather than close them if unsaved changes persist on buffer switch
set hidden

" enable language-specific syntax highlighting
syntax enable

" enable 256 colors
set t_Co=256

" set color theme
colo elflord

" show line numbers
set number

" set tabs to have 4 spaces
set tabstop=4
set softtabstop=4

" when using the >> or << commands, shift lines by 4 spaces
set shiftwidth=4

" search as characters are entered
set incsearch

" highlight matches
set hlsearch

" leader is comma
let mapleader=","

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

"enable folding
set foldenable

" move vertically by visual line
nnoremap j gj
nnoremap k gk

" tabs turn into spaces
set expandtab

" indent when moving to the next line
set autoindent
set pastetoggle=<leader>p

" toggle nerdtree
map <C-n> :NERDTreeToggle<CR>

" syntastic configuration
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_php_checkers=['php','phpcs','phpmd']
let g:syntastic_javascript_checkers = ['jshint']
" let b:syntastic_skip_checks = 0

map <silent> <Leader>e :Errors<CR>
map <Leader>w :SyntasticToggleMode<CR>

" toggle hard mode
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>

" default hard mode on
" autocmd VimEnter,BufNewFile,BufReadPost * silent! call HardMode()

command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
  1
endfunction

map <leader><leader> :Shell ./build<CR><CR>

map <leader>d :bd<CR>

" same vim window switching (switch vim windows using only Ctrl + h,j,k,l)
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" bind jj to Esc only in insert mode
imap jj <Esc>



autocmd BufWritePost *.elm call ElmFormat()

" Vim command to format Elm files with elm-format
function! ElmFormat() abort
    " check for elm-format
    if CheckBin('elm-format', 'https://github.com/avh4/elm-format') ==# ''
        return
    endif

    " save cursor position, folds and many other things
    let l:curw = {}
    try
      mkview!
    catch
      let l:curw = winsaveview()
    endtry

    " save our undo file to be restored after we are done.
    let l:tmpundofile = tempname()
    exe 'wundo! ' . l:tmpundofile

    " write current unsaved buffer to a temporary file
    let l:tmpname = tempname() . '.elm'
    call writefile(getline(1, '$'), l:tmpname)

    " call elm-format on the temporary file
    let l:out = system('elm-format ' . l:tmpname . ' --output ' . l:tmpname)

    " if there is no error
    if v:shell_error == 0
        try | silent undojoin | catch | endtry

        " replace current file with temp file, then reload buffer
        let l:old_fileformat = &fileformat
        call rename(l:tmpname, expand('%'))
        silent edit!
        let &fileformat = l:old_fileformat
        let &syntax = &syntax
    elseif g:elm_format_fail_silently == 0
        call EchoLater('EchoError', 'elm-format:', l:out)
    endif

    " save our undo history
    silent! exe 'rundo ' . l:tmpundofile
    call delete(l:tmpundofile)

    " restore our cursor/windows positions, folds, etc..
    if empty(l:curw)
      silent! loadview
    else
      call winrestview(l:curw)
    endif
endf

fun! CheckBin(bin, url) abort
  let l:binpath = substitute(a:bin, '^\s*\(.\{-}\)\s*$', '\1', '')

  if executable(l:binpath)
    return l:binpath
  endif

  call elm#util#EchoWarning('elm-vim:', 'could not find ' . l:binpath . ' [' . a:url . ']')

  return ''
endf

fun! EchoLater(func_name, title, msg) abort
  let s:echo_func_name = a:func_name
  let s:echo_title = a:title
  let s:echo_msg = a:msg
endf

